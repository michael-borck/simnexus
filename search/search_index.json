{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SimNexus Overview Welcome to the documentation for the SimNexus framework. This framework includes several simulation models that are designed to demonstrate and analyze various phenomena in business and economics. Here, you will find detailed information on the workings and usage of each simulation model. Product Popularity Simulation The Product Popularity Simulation models the dynamics of product demand over time, considering factors like natural growth, marketing impact, and promotional campaigns. Learn more about the Product Popularity Simulation Stock Market Simulation The Stock Market Simulation provides a framework for modeling and predicting stock price movements based on various economic and psychological factors. Learn more about the Stock Market Simulation Resource Fluctuations Simulation The Resource Fluctuations Simulation models the price variability of resources over time, factoring in elements like market volatility, economic drift, and external disruptions. Learn more about the Resource Fluctuations Simulation Modelling Market Dynamics Each model incorporates different aspects of market behavior and is linked to classical and traditional models in economics and finance. See Modelling Market Dynamics Getting Started To get started with using these simulations, visit our Getting Started guide which will help you set up and run your first simulations. Contribute Interested in contributing to the Simulation Framework? Check out our Contribution Guidelines for more information on how you can help improve these simulations. Contact If you have any questions or feedback, please don't hesitate to Contact Us .","title":"Home"},{"location":"#simnexus-overview","text":"Welcome to the documentation for the SimNexus framework. This framework includes several simulation models that are designed to demonstrate and analyze various phenomena in business and economics. Here, you will find detailed information on the workings and usage of each simulation model.","title":"SimNexus Overview"},{"location":"#product-popularity-simulation","text":"The Product Popularity Simulation models the dynamics of product demand over time, considering factors like natural growth, marketing impact, and promotional campaigns. Learn more about the Product Popularity Simulation","title":"Product Popularity Simulation"},{"location":"#stock-market-simulation","text":"The Stock Market Simulation provides a framework for modeling and predicting stock price movements based on various economic and psychological factors. Learn more about the Stock Market Simulation","title":"Stock Market Simulation"},{"location":"#resource-fluctuations-simulation","text":"The Resource Fluctuations Simulation models the price variability of resources over time, factoring in elements like market volatility, economic drift, and external disruptions. Learn more about the Resource Fluctuations Simulation","title":"Resource Fluctuations Simulation"},{"location":"#modelling-market-dynamics","text":"Each model incorporates different aspects of market behavior and is linked to classical and traditional models in economics and finance. See Modelling Market Dynamics","title":"Modelling Market Dynamics"},{"location":"#getting-started","text":"To get started with using these simulations, visit our Getting Started guide which will help you set up and run your first simulations.","title":"Getting Started"},{"location":"#contribute","text":"Interested in contributing to the Simulation Framework? Check out our Contribution Guidelines for more information on how you can help improve these simulations.","title":"Contribute"},{"location":"#contact","text":"If you have any questions or feedback, please don't hesitate to Contact Us .","title":"Contact"},{"location":"api/","text":"API Documentation Product Popularity Simulation Class A simulation class to model the dynamics of product popularity over time, incorporating factors like natural growth, marketing impact, and promotional campaigns. Attributes: start_demand ( int ) \u2013 Initial demand for the product. days ( int ) \u2013 Duration of the simulation in days. growth_rate ( float ) \u2013 Natural growth rate of product demand. marketing_impact ( float ) \u2013 Impact of ongoing marketing efforts on demand. promotion_day ( Optional [ int ] ) \u2013 Day on which a major marketing campaign starts (default is None). promotion_effectiveness ( float ) \u2013 Effectiveness of the marketing campaign. random_seed ( Optional [ int ] ) \u2013 The seed for the random number generator to ensure reproducibility (default is None). Methods: Name Description run_simulation Runs the simulation and returns a list of demand values over time. Source code in simnexus/product_popularity_simulation.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class ProductPopularitySimulation : \"\"\" A simulation class to model the dynamics of product popularity over time, incorporating factors like natural growth, marketing impact, and promotional campaigns. Attributes: start_demand (int): Initial demand for the product. days (int): Duration of the simulation in days. growth_rate (float): Natural growth rate of product demand. marketing_impact (float): Impact of ongoing marketing efforts on demand. promotion_day (Optional[int]): Day on which a major marketing campaign starts (default is None). promotion_effectiveness (float): Effectiveness of the marketing campaign. random_seed (Optional[int]): The seed for the random number generator to ensure reproducibility (default is None). Methods: run_simulation(): Runs the simulation and returns a list of demand values over time. \"\"\" def __init__ ( self , start_demand : float , days : int , growth_rate : float , marketing_impact : float , promotion_day : Optional [ int ] = None , promotion_effectiveness : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the ProductPopularitySimulation with all necessary parameters. Parameters: start_demand (int): The initial level of demand for the product. days (int): The total number of days to simulate. growth_rate (float): The natural daily growth rate of demand, as a decimal. marketing_impact (float): Daily impact of marketing on demand, as a decimal. promotion_day (Optional[int]): The specific day on which a promotional event occurs (defaults to None). promotion_effectiveness (float): Multiplicative impact of the promotion on demand. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_demand = start_demand self . days = days self . growth_rate = growth_rate self . marketing_impact = marketing_impact self . promotion_day = promotion_day self . promotion_effectiveness = promotion_effectiveness self . random_seed = random_seed def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the demand for a product over a specified number of days based on the initial settings. Returns: List[int]: A list containing the demand for the product for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) demand = [ self . start_demand ] for day in range ( 1 , self . days ): previous_demand = demand [ - 1 ] natural_growth = previous_demand * ( 1 + self . growth_rate ) marketing_influence = previous_demand * self . marketing_impact new_demand = natural_growth + marketing_influence if day == self . promotion_day : new_demand = ( natural_growth + marketing_influence ) * ( 1 + self . promotion_effectiveness ) demand . append ( new_demand ) return demand __init__ ( start_demand , days , growth_rate , marketing_impact , promotion_day = None , promotion_effectiveness = 0 , random_seed = None ) Initializes the ProductPopularitySimulation with all necessary parameters. Parameters: start_demand ( int ) \u2013 The initial level of demand for the product. days ( int ) \u2013 The total number of days to simulate. growth_rate ( float ) \u2013 The natural daily growth rate of demand, as a decimal. marketing_impact ( float ) \u2013 Daily impact of marketing on demand, as a decimal. promotion_day ( Optional [ int ] , default: None ) \u2013 The specific day on which a promotional event occurs (defaults to None). promotion_effectiveness ( float , default: 0 ) \u2013 Multiplicative impact of the promotion on demand. random_seed ( Optional [ int ] , default: None ) \u2013 Seed for the random number generator to ensure reproducible results (defaults to None). Source code in simnexus/product_popularity_simulation.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def __init__ ( self , start_demand : float , days : int , growth_rate : float , marketing_impact : float , promotion_day : Optional [ int ] = None , promotion_effectiveness : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the ProductPopularitySimulation with all necessary parameters. Parameters: start_demand (int): The initial level of demand for the product. days (int): The total number of days to simulate. growth_rate (float): The natural daily growth rate of demand, as a decimal. marketing_impact (float): Daily impact of marketing on demand, as a decimal. promotion_day (Optional[int]): The specific day on which a promotional event occurs (defaults to None). promotion_effectiveness (float): Multiplicative impact of the promotion on demand. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_demand = start_demand self . days = days self . growth_rate = growth_rate self . marketing_impact = marketing_impact self . promotion_day = promotion_day self . promotion_effectiveness = promotion_effectiveness self . random_seed = random_seed run_simulation () Simulates the demand for a product over a specified number of days based on the initial settings. Returns: List [ float ] \u2013 List[int]: A list containing the demand for the product for each day of the simulation. Source code in simnexus/product_popularity_simulation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the demand for a product over a specified number of days based on the initial settings. Returns: List[int]: A list containing the demand for the product for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) demand = [ self . start_demand ] for day in range ( 1 , self . days ): previous_demand = demand [ - 1 ] natural_growth = previous_demand * ( 1 + self . growth_rate ) marketing_influence = previous_demand * self . marketing_impact new_demand = natural_growth + marketing_influence if day == self . promotion_day : new_demand = ( natural_growth + marketing_influence ) * ( 1 + self . promotion_effectiveness ) demand . append ( new_demand ) return demand Resource Fluctuation Simulation Class A simulation class to model the fluctuations of resource prices over time, considering factors like volatility, market trends (drift), and supply disruptions. Attributes: start_price ( float ) \u2013 The initial price of the resource. days ( int ) \u2013 The duration of the simulation in days. volatility ( float ) \u2013 The volatility of price changes, representing day-to-day variability. drift ( float ) \u2013 The average daily price change, indicating the trend over time. supply_disruption_day ( Optional [ int ] ) \u2013 The specific day a supply disruption occurs (default is None). disruption_severity ( float ) \u2013 The magnitude of the disruption's impact on price (default is 0). random_seed ( Optional [ int ] ) \u2013 The seed for the random number generator to ensure reproducibility (default is None). Source code in simnexus/resource_fluctuations_simulation.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class ResourceFluctuationsSimulation : \"\"\" A simulation class to model the fluctuations of resource prices over time, considering factors like volatility, market trends (drift), and supply disruptions. Attributes: start_price (float): The initial price of the resource. days (int): The duration of the simulation in days. volatility (float): The volatility of price changes, representing day-to-day variability. drift (float): The average daily price change, indicating the trend over time. supply_disruption_day (Optional[int]): The specific day a supply disruption occurs (default is None). disruption_severity (float): The magnitude of the disruption's impact on price (default is 0). random_seed (Optional[int]): The seed for the random number generator to ensure reproducibility (default is None). \"\"\" def __init__ ( self , start_price : float , days : int , volatility : float , drift : float , supply_disruption_day : Optional [ int ] = None , disruption_severity : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the ResourceSimulation with all necessary parameters. Parameters: start_price (float): The initial price of the resource. days (int): The total number of days to simulate. volatility (float): The volatility of the resource price, representing the randomness of day-to-day price changes. drift (float): The expected daily percentage change in price, which can be positive or negative. supply_disruption_day (Optional[int]): Day on which a supply disruption occurs (defaults to None). disruption_severity (float): The severity of the supply disruption, affecting prices multiplicatively. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_price = start_price self . days = days self . volatility = volatility self . drift = drift self . supply_disruption_day = supply_disruption_day self . disruption_severity = disruption_severity self . random_seed = random_seed def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the price of the resource over a specified number of days based on the initial settings. Returns: List[float]: A list containing the price of the resource for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) prices = [ self . start_price ] for day in range ( 1 , self . days ): previous_price = prices [ - 1 ] random_change = np . random . normal ( self . drift , self . volatility ) new_price = previous_price * ( 1 + random_change ) if day == self . supply_disruption_day : new_price = previous_price * ( 1 + self . disruption_severity ) prices . append ( new_price ) return prices __init__ ( start_price , days , volatility , drift , supply_disruption_day = None , disruption_severity = 0 , random_seed = None ) Initializes the ResourceSimulation with all necessary parameters. Parameters: start_price ( float ) \u2013 The initial price of the resource. days ( int ) \u2013 The total number of days to simulate. volatility ( float ) \u2013 The volatility of the resource price, representing the randomness of day-to-day price changes. drift ( float ) \u2013 The expected daily percentage change in price, which can be positive or negative. supply_disruption_day ( Optional [ int ] , default: None ) \u2013 Day on which a supply disruption occurs (defaults to None). disruption_severity ( float , default: 0 ) \u2013 The severity of the supply disruption, affecting prices multiplicatively. random_seed ( Optional [ int ] , default: None ) \u2013 Seed for the random number generator to ensure reproducible results (defaults to None). Source code in simnexus/resource_fluctuations_simulation.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , start_price : float , days : int , volatility : float , drift : float , supply_disruption_day : Optional [ int ] = None , disruption_severity : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the ResourceSimulation with all necessary parameters. Parameters: start_price (float): The initial price of the resource. days (int): The total number of days to simulate. volatility (float): The volatility of the resource price, representing the randomness of day-to-day price changes. drift (float): The expected daily percentage change in price, which can be positive or negative. supply_disruption_day (Optional[int]): Day on which a supply disruption occurs (defaults to None). disruption_severity (float): The severity of the supply disruption, affecting prices multiplicatively. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_price = start_price self . days = days self . volatility = volatility self . drift = drift self . supply_disruption_day = supply_disruption_day self . disruption_severity = disruption_severity self . random_seed = random_seed run_simulation () Simulates the price of the resource over a specified number of days based on the initial settings. Returns: List [ float ] \u2013 List[float]: A list containing the price of the resource for each day of the simulation. Source code in simnexus/resource_fluctuations_simulation.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the price of the resource over a specified number of days based on the initial settings. Returns: List[float]: A list containing the price of the resource for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) prices = [ self . start_price ] for day in range ( 1 , self . days ): previous_price = prices [ - 1 ] random_change = np . random . normal ( self . drift , self . volatility ) new_price = previous_price * ( 1 + random_change ) if day == self . supply_disruption_day : new_price = previous_price * ( 1 + self . disruption_severity ) prices . append ( new_price ) return prices Stock Market Simulation Class A simulation class to model the fluctuations of stock prices over time, accounting for volatility, general market trends (drift), and specific market events. Attributes: start_price ( float ) \u2013 The initial price of the stock. days ( int ) \u2013 The duration of the simulation in days. volatility ( float ) \u2013 The volatility of stock price changes, representing day-to-day variability. drift ( float ) \u2013 The average daily price change, indicating the trend over time. event_day ( Optional [ int ] ) \u2013 The specific day a major market event occurs (default is None). event_impact ( float ) \u2013 The magnitude of the event's impact on stock prices (default is 0). random_seed ( Optional [ int ] ) \u2013 The seed for the random number generator to ensure reproducibility (default is None). Methods: Name Description run_simulation Runs the simulation and returns a list of stock prices over the simulation period. Source code in simnexus/stock_market_simulation.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class StockMarketSimulation : \"\"\" A simulation class to model the fluctuations of stock prices over time, accounting for volatility, general market trends (drift), and specific market events. Attributes: start_price (float): The initial price of the stock. days (int): The duration of the simulation in days. volatility (float): The volatility of stock price changes, representing day-to-day variability. drift (float): The average daily price change, indicating the trend over time. event_day (Optional[int]): The specific day a major market event occurs (default is None). event_impact (float): The magnitude of the event's impact on stock prices (default is 0). random_seed (Optional[int]): The seed for the random number generator to ensure reproducibility (default is None). Methods: run_simulation(): Runs the simulation and returns a list of stock prices over the simulation period. \"\"\" def __init__ ( self , start_price : float , days : int , volatility : float , drift : float , event_day : Optional [ int ] = None , event_impact : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the StockMarketSimulation with all necessary parameters. Parameters: start_price (float): The initial stock price. days (int): The total number of days to simulate. volatility (float): The volatility of the stock price, representing the randomness of day-to-day price changes. drift (float): The expected daily percentage change in price, which can be positive or negative. event_day (Optional[int]): Day on which a major market event occurs (defaults to None). event_impact (float): The severity of the market event, affecting prices multiplicatively. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_price = start_price self . days = days self . volatility = volatility self . drift = drift self . event_day = event_day self . event_impact = event_impact self . random_seed = random_seed def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the stock price over a specified number of days based on the initial settings. Returns: List[float]: A list containing the stock prices for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) prices = [ self . start_price ] for day in range ( 1 , self . days ): previous_price = prices [ - 1 ] random_change = np . random . normal ( self . drift , self . volatility ) new_price = previous_price * ( 1 + random_change ) if day == self . event_day : new_price = previous_price * ( 1 + self . event_impact ) prices . append ( new_price ) return prices __init__ ( start_price , days , volatility , drift , event_day = None , event_impact = 0 , random_seed = None ) Initializes the StockMarketSimulation with all necessary parameters. Parameters: start_price ( float ) \u2013 The initial stock price. days ( int ) \u2013 The total number of days to simulate. volatility ( float ) \u2013 The volatility of the stock price, representing the randomness of day-to-day price changes. drift ( float ) \u2013 The expected daily percentage change in price, which can be positive or negative. event_day ( Optional [ int ] , default: None ) \u2013 Day on which a major market event occurs (defaults to None). event_impact ( float , default: 0 ) \u2013 The severity of the market event, affecting prices multiplicatively. random_seed ( Optional [ int ] , default: None ) \u2013 Seed for the random number generator to ensure reproducible results (defaults to None). Source code in simnexus/stock_market_simulation.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def __init__ ( self , start_price : float , days : int , volatility : float , drift : float , event_day : Optional [ int ] = None , event_impact : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the StockMarketSimulation with all necessary parameters. Parameters: start_price (float): The initial stock price. days (int): The total number of days to simulate. volatility (float): The volatility of the stock price, representing the randomness of day-to-day price changes. drift (float): The expected daily percentage change in price, which can be positive or negative. event_day (Optional[int]): Day on which a major market event occurs (defaults to None). event_impact (float): The severity of the market event, affecting prices multiplicatively. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_price = start_price self . days = days self . volatility = volatility self . drift = drift self . event_day = event_day self . event_impact = event_impact self . random_seed = random_seed run_simulation () Simulates the stock price over a specified number of days based on the initial settings. Returns: List [ float ] \u2013 List[float]: A list containing the stock prices for each day of the simulation. Source code in simnexus/stock_market_simulation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the stock price over a specified number of days based on the initial settings. Returns: List[float]: A list containing the stock prices for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) prices = [ self . start_price ] for day in range ( 1 , self . days ): previous_price = prices [ - 1 ] random_change = np . random . normal ( self . drift , self . volatility ) new_price = previous_price * ( 1 + random_change ) if day == self . event_day : new_price = previous_price * ( 1 + self . event_impact ) prices . append ( new_price ) return prices","title":"API Documentation"},{"location":"api/#api-documentation","text":"","title":"API Documentation"},{"location":"api/#product-popularity-simulation-class","text":"A simulation class to model the dynamics of product popularity over time, incorporating factors like natural growth, marketing impact, and promotional campaigns. Attributes: start_demand ( int ) \u2013 Initial demand for the product. days ( int ) \u2013 Duration of the simulation in days. growth_rate ( float ) \u2013 Natural growth rate of product demand. marketing_impact ( float ) \u2013 Impact of ongoing marketing efforts on demand. promotion_day ( Optional [ int ] ) \u2013 Day on which a major marketing campaign starts (default is None). promotion_effectiveness ( float ) \u2013 Effectiveness of the marketing campaign. random_seed ( Optional [ int ] ) \u2013 The seed for the random number generator to ensure reproducibility (default is None). Methods: Name Description run_simulation Runs the simulation and returns a list of demand values over time. Source code in simnexus/product_popularity_simulation.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class ProductPopularitySimulation : \"\"\" A simulation class to model the dynamics of product popularity over time, incorporating factors like natural growth, marketing impact, and promotional campaigns. Attributes: start_demand (int): Initial demand for the product. days (int): Duration of the simulation in days. growth_rate (float): Natural growth rate of product demand. marketing_impact (float): Impact of ongoing marketing efforts on demand. promotion_day (Optional[int]): Day on which a major marketing campaign starts (default is None). promotion_effectiveness (float): Effectiveness of the marketing campaign. random_seed (Optional[int]): The seed for the random number generator to ensure reproducibility (default is None). Methods: run_simulation(): Runs the simulation and returns a list of demand values over time. \"\"\" def __init__ ( self , start_demand : float , days : int , growth_rate : float , marketing_impact : float , promotion_day : Optional [ int ] = None , promotion_effectiveness : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the ProductPopularitySimulation with all necessary parameters. Parameters: start_demand (int): The initial level of demand for the product. days (int): The total number of days to simulate. growth_rate (float): The natural daily growth rate of demand, as a decimal. marketing_impact (float): Daily impact of marketing on demand, as a decimal. promotion_day (Optional[int]): The specific day on which a promotional event occurs (defaults to None). promotion_effectiveness (float): Multiplicative impact of the promotion on demand. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_demand = start_demand self . days = days self . growth_rate = growth_rate self . marketing_impact = marketing_impact self . promotion_day = promotion_day self . promotion_effectiveness = promotion_effectiveness self . random_seed = random_seed def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the demand for a product over a specified number of days based on the initial settings. Returns: List[int]: A list containing the demand for the product for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) demand = [ self . start_demand ] for day in range ( 1 , self . days ): previous_demand = demand [ - 1 ] natural_growth = previous_demand * ( 1 + self . growth_rate ) marketing_influence = previous_demand * self . marketing_impact new_demand = natural_growth + marketing_influence if day == self . promotion_day : new_demand = ( natural_growth + marketing_influence ) * ( 1 + self . promotion_effectiveness ) demand . append ( new_demand ) return demand","title":"Product Popularity Simulation Class"},{"location":"api/#simnexus.ProductPopularitySimulation.__init__","text":"Initializes the ProductPopularitySimulation with all necessary parameters. Parameters: start_demand ( int ) \u2013 The initial level of demand for the product. days ( int ) \u2013 The total number of days to simulate. growth_rate ( float ) \u2013 The natural daily growth rate of demand, as a decimal. marketing_impact ( float ) \u2013 Daily impact of marketing on demand, as a decimal. promotion_day ( Optional [ int ] , default: None ) \u2013 The specific day on which a promotional event occurs (defaults to None). promotion_effectiveness ( float , default: 0 ) \u2013 Multiplicative impact of the promotion on demand. random_seed ( Optional [ int ] , default: None ) \u2013 Seed for the random number generator to ensure reproducible results (defaults to None). Source code in simnexus/product_popularity_simulation.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def __init__ ( self , start_demand : float , days : int , growth_rate : float , marketing_impact : float , promotion_day : Optional [ int ] = None , promotion_effectiveness : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the ProductPopularitySimulation with all necessary parameters. Parameters: start_demand (int): The initial level of demand for the product. days (int): The total number of days to simulate. growth_rate (float): The natural daily growth rate of demand, as a decimal. marketing_impact (float): Daily impact of marketing on demand, as a decimal. promotion_day (Optional[int]): The specific day on which a promotional event occurs (defaults to None). promotion_effectiveness (float): Multiplicative impact of the promotion on demand. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_demand = start_demand self . days = days self . growth_rate = growth_rate self . marketing_impact = marketing_impact self . promotion_day = promotion_day self . promotion_effectiveness = promotion_effectiveness self . random_seed = random_seed","title":"__init__"},{"location":"api/#simnexus.ProductPopularitySimulation.run_simulation","text":"Simulates the demand for a product over a specified number of days based on the initial settings. Returns: List [ float ] \u2013 List[int]: A list containing the demand for the product for each day of the simulation. Source code in simnexus/product_popularity_simulation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the demand for a product over a specified number of days based on the initial settings. Returns: List[int]: A list containing the demand for the product for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) demand = [ self . start_demand ] for day in range ( 1 , self . days ): previous_demand = demand [ - 1 ] natural_growth = previous_demand * ( 1 + self . growth_rate ) marketing_influence = previous_demand * self . marketing_impact new_demand = natural_growth + marketing_influence if day == self . promotion_day : new_demand = ( natural_growth + marketing_influence ) * ( 1 + self . promotion_effectiveness ) demand . append ( new_demand ) return demand","title":"run_simulation"},{"location":"api/#resource-fluctuation-simulation-class","text":"A simulation class to model the fluctuations of resource prices over time, considering factors like volatility, market trends (drift), and supply disruptions. Attributes: start_price ( float ) \u2013 The initial price of the resource. days ( int ) \u2013 The duration of the simulation in days. volatility ( float ) \u2013 The volatility of price changes, representing day-to-day variability. drift ( float ) \u2013 The average daily price change, indicating the trend over time. supply_disruption_day ( Optional [ int ] ) \u2013 The specific day a supply disruption occurs (default is None). disruption_severity ( float ) \u2013 The magnitude of the disruption's impact on price (default is 0). random_seed ( Optional [ int ] ) \u2013 The seed for the random number generator to ensure reproducibility (default is None). Source code in simnexus/resource_fluctuations_simulation.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class ResourceFluctuationsSimulation : \"\"\" A simulation class to model the fluctuations of resource prices over time, considering factors like volatility, market trends (drift), and supply disruptions. Attributes: start_price (float): The initial price of the resource. days (int): The duration of the simulation in days. volatility (float): The volatility of price changes, representing day-to-day variability. drift (float): The average daily price change, indicating the trend over time. supply_disruption_day (Optional[int]): The specific day a supply disruption occurs (default is None). disruption_severity (float): The magnitude of the disruption's impact on price (default is 0). random_seed (Optional[int]): The seed for the random number generator to ensure reproducibility (default is None). \"\"\" def __init__ ( self , start_price : float , days : int , volatility : float , drift : float , supply_disruption_day : Optional [ int ] = None , disruption_severity : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the ResourceSimulation with all necessary parameters. Parameters: start_price (float): The initial price of the resource. days (int): The total number of days to simulate. volatility (float): The volatility of the resource price, representing the randomness of day-to-day price changes. drift (float): The expected daily percentage change in price, which can be positive or negative. supply_disruption_day (Optional[int]): Day on which a supply disruption occurs (defaults to None). disruption_severity (float): The severity of the supply disruption, affecting prices multiplicatively. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_price = start_price self . days = days self . volatility = volatility self . drift = drift self . supply_disruption_day = supply_disruption_day self . disruption_severity = disruption_severity self . random_seed = random_seed def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the price of the resource over a specified number of days based on the initial settings. Returns: List[float]: A list containing the price of the resource for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) prices = [ self . start_price ] for day in range ( 1 , self . days ): previous_price = prices [ - 1 ] random_change = np . random . normal ( self . drift , self . volatility ) new_price = previous_price * ( 1 + random_change ) if day == self . supply_disruption_day : new_price = previous_price * ( 1 + self . disruption_severity ) prices . append ( new_price ) return prices","title":"Resource Fluctuation Simulation Class"},{"location":"api/#simnexus.ResourceFluctuationsSimulation.__init__","text":"Initializes the ResourceSimulation with all necessary parameters. Parameters: start_price ( float ) \u2013 The initial price of the resource. days ( int ) \u2013 The total number of days to simulate. volatility ( float ) \u2013 The volatility of the resource price, representing the randomness of day-to-day price changes. drift ( float ) \u2013 The expected daily percentage change in price, which can be positive or negative. supply_disruption_day ( Optional [ int ] , default: None ) \u2013 Day on which a supply disruption occurs (defaults to None). disruption_severity ( float , default: 0 ) \u2013 The severity of the supply disruption, affecting prices multiplicatively. random_seed ( Optional [ int ] , default: None ) \u2013 Seed for the random number generator to ensure reproducible results (defaults to None). Source code in simnexus/resource_fluctuations_simulation.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def __init__ ( self , start_price : float , days : int , volatility : float , drift : float , supply_disruption_day : Optional [ int ] = None , disruption_severity : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the ResourceSimulation with all necessary parameters. Parameters: start_price (float): The initial price of the resource. days (int): The total number of days to simulate. volatility (float): The volatility of the resource price, representing the randomness of day-to-day price changes. drift (float): The expected daily percentage change in price, which can be positive or negative. supply_disruption_day (Optional[int]): Day on which a supply disruption occurs (defaults to None). disruption_severity (float): The severity of the supply disruption, affecting prices multiplicatively. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_price = start_price self . days = days self . volatility = volatility self . drift = drift self . supply_disruption_day = supply_disruption_day self . disruption_severity = disruption_severity self . random_seed = random_seed","title":"__init__"},{"location":"api/#simnexus.ResourceFluctuationsSimulation.run_simulation","text":"Simulates the price of the resource over a specified number of days based on the initial settings. Returns: List [ float ] \u2013 List[float]: A list containing the price of the resource for each day of the simulation. Source code in simnexus/resource_fluctuations_simulation.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the price of the resource over a specified number of days based on the initial settings. Returns: List[float]: A list containing the price of the resource for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) prices = [ self . start_price ] for day in range ( 1 , self . days ): previous_price = prices [ - 1 ] random_change = np . random . normal ( self . drift , self . volatility ) new_price = previous_price * ( 1 + random_change ) if day == self . supply_disruption_day : new_price = previous_price * ( 1 + self . disruption_severity ) prices . append ( new_price ) return prices","title":"run_simulation"},{"location":"api/#stock-market-simulation-class","text":"A simulation class to model the fluctuations of stock prices over time, accounting for volatility, general market trends (drift), and specific market events. Attributes: start_price ( float ) \u2013 The initial price of the stock. days ( int ) \u2013 The duration of the simulation in days. volatility ( float ) \u2013 The volatility of stock price changes, representing day-to-day variability. drift ( float ) \u2013 The average daily price change, indicating the trend over time. event_day ( Optional [ int ] ) \u2013 The specific day a major market event occurs (default is None). event_impact ( float ) \u2013 The magnitude of the event's impact on stock prices (default is 0). random_seed ( Optional [ int ] ) \u2013 The seed for the random number generator to ensure reproducibility (default is None). Methods: Name Description run_simulation Runs the simulation and returns a list of stock prices over the simulation period. Source code in simnexus/stock_market_simulation.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class StockMarketSimulation : \"\"\" A simulation class to model the fluctuations of stock prices over time, accounting for volatility, general market trends (drift), and specific market events. Attributes: start_price (float): The initial price of the stock. days (int): The duration of the simulation in days. volatility (float): The volatility of stock price changes, representing day-to-day variability. drift (float): The average daily price change, indicating the trend over time. event_day (Optional[int]): The specific day a major market event occurs (default is None). event_impact (float): The magnitude of the event's impact on stock prices (default is 0). random_seed (Optional[int]): The seed for the random number generator to ensure reproducibility (default is None). Methods: run_simulation(): Runs the simulation and returns a list of stock prices over the simulation period. \"\"\" def __init__ ( self , start_price : float , days : int , volatility : float , drift : float , event_day : Optional [ int ] = None , event_impact : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the StockMarketSimulation with all necessary parameters. Parameters: start_price (float): The initial stock price. days (int): The total number of days to simulate. volatility (float): The volatility of the stock price, representing the randomness of day-to-day price changes. drift (float): The expected daily percentage change in price, which can be positive or negative. event_day (Optional[int]): Day on which a major market event occurs (defaults to None). event_impact (float): The severity of the market event, affecting prices multiplicatively. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_price = start_price self . days = days self . volatility = volatility self . drift = drift self . event_day = event_day self . event_impact = event_impact self . random_seed = random_seed def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the stock price over a specified number of days based on the initial settings. Returns: List[float]: A list containing the stock prices for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) prices = [ self . start_price ] for day in range ( 1 , self . days ): previous_price = prices [ - 1 ] random_change = np . random . normal ( self . drift , self . volatility ) new_price = previous_price * ( 1 + random_change ) if day == self . event_day : new_price = previous_price * ( 1 + self . event_impact ) prices . append ( new_price ) return prices","title":"Stock Market Simulation Class"},{"location":"api/#simnexus.StockMarketSimulation.__init__","text":"Initializes the StockMarketSimulation with all necessary parameters. Parameters: start_price ( float ) \u2013 The initial stock price. days ( int ) \u2013 The total number of days to simulate. volatility ( float ) \u2013 The volatility of the stock price, representing the randomness of day-to-day price changes. drift ( float ) \u2013 The expected daily percentage change in price, which can be positive or negative. event_day ( Optional [ int ] , default: None ) \u2013 Day on which a major market event occurs (defaults to None). event_impact ( float , default: 0 ) \u2013 The severity of the market event, affecting prices multiplicatively. random_seed ( Optional [ int ] , default: None ) \u2013 Seed for the random number generator to ensure reproducible results (defaults to None). Source code in simnexus/stock_market_simulation.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def __init__ ( self , start_price : float , days : int , volatility : float , drift : float , event_day : Optional [ int ] = None , event_impact : float = 0 , random_seed : Optional [ int ] = None ) -> None : \"\"\" Initializes the StockMarketSimulation with all necessary parameters. Parameters: start_price (float): The initial stock price. days (int): The total number of days to simulate. volatility (float): The volatility of the stock price, representing the randomness of day-to-day price changes. drift (float): The expected daily percentage change in price, which can be positive or negative. event_day (Optional[int]): Day on which a major market event occurs (defaults to None). event_impact (float): The severity of the market event, affecting prices multiplicatively. random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None). \"\"\" self . start_price = start_price self . days = days self . volatility = volatility self . drift = drift self . event_day = event_day self . event_impact = event_impact self . random_seed = random_seed","title":"__init__"},{"location":"api/#simnexus.StockMarketSimulation.run_simulation","text":"Simulates the stock price over a specified number of days based on the initial settings. Returns: List [ float ] \u2013 List[float]: A list containing the stock prices for each day of the simulation. Source code in simnexus/stock_market_simulation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def run_simulation ( self ) -> List [ float ]: \"\"\" Simulates the stock price over a specified number of days based on the initial settings. Returns: List[float]: A list containing the stock prices for each day of the simulation. \"\"\" if self . random_seed is not None : np . random . seed ( self . random_seed ) prices = [ self . start_price ] for day in range ( 1 , self . days ): previous_price = prices [ - 1 ] random_change = np . random . normal ( self . drift , self . volatility ) new_price = previous_price * ( 1 + random_change ) if day == self . event_day : new_price = previous_price * ( 1 + self . event_impact ) prices . append ( new_price ) return prices","title":"run_simulation"},{"location":"contact/","text":"Contact Us If you have any questions, need support, or wish to provide feedback about SimNexus, please feel free to reach out. We value your input and are here to help. General Inquiries For general questions about SimNexus or how to use it, please email us at: Email : support@simnexus.com Please allow 24-48 hours for a response, as we strive to provide detailed and helpful answers to all inquiries. Technical Support If you're experiencing technical issues or need help troubleshooting, you can: Submit an Issue : Visit our GitHub Issues Page to report a bug or a problem. Please check to see if your issue has already been reported or addressed before opening a new issue. Feature Requests We are always looking to improve SimNexus and welcome your ideas and proposals for new features: Feature Suggestions : Please submit your feature requests through our GitHub Issues Page . Tag your post with the 'feature request' label so we can easily identify it. Follow Us Stay updated on the latest developments and updates of SimNexus by following us on social media: Twitter : @SimNexusTech LinkedIn : SimNexus Technologies Mailing List Join our mailing list to receive updates, news, and special offers related to SimNexus: Sign Up : Join Mailing List [Link to mailing list subscription form] Thank you for your interest in SimNexus. We look forward to hearing from you and assisting you with your simulation needs!","title":"Contact"},{"location":"contact/#contact-us","text":"If you have any questions, need support, or wish to provide feedback about SimNexus, please feel free to reach out. We value your input and are here to help.","title":"Contact Us"},{"location":"contact/#general-inquiries","text":"For general questions about SimNexus or how to use it, please email us at: Email : support@simnexus.com Please allow 24-48 hours for a response, as we strive to provide detailed and helpful answers to all inquiries.","title":"General Inquiries"},{"location":"contact/#technical-support","text":"If you're experiencing technical issues or need help troubleshooting, you can: Submit an Issue : Visit our GitHub Issues Page to report a bug or a problem. Please check to see if your issue has already been reported or addressed before opening a new issue.","title":"Technical Support"},{"location":"contact/#feature-requests","text":"We are always looking to improve SimNexus and welcome your ideas and proposals for new features: Feature Suggestions : Please submit your feature requests through our GitHub Issues Page . Tag your post with the 'feature request' label so we can easily identify it.","title":"Feature Requests"},{"location":"contact/#follow-us","text":"Stay updated on the latest developments and updates of SimNexus by following us on social media: Twitter : @SimNexusTech LinkedIn : SimNexus Technologies","title":"Follow Us"},{"location":"contact/#mailing-list","text":"Join our mailing list to receive updates, news, and special offers related to SimNexus: Sign Up : Join Mailing List [Link to mailing list subscription form] Thank you for your interest in SimNexus. We look forward to hearing from you and assisting you with your simulation needs!","title":"Mailing List"},{"location":"contribute/","text":"Contribute to Our Project We welcome contributions from the community. Before contributing, please read our contribution guidelines to understand how you can help improve this project. Read the Contribution Guidelines","title":"Contribute"},{"location":"contribute/#contribute-to-our-project","text":"We welcome contributions from the community. Before contributing, please read our contribution guidelines to understand how you can help improve this project. Read the Contribution Guidelines","title":"Contribute to Our Project"},{"location":"getting_started/","text":"Getting Started with SimNexus Welcome to the getting started guide for SimNexus, a package designed for simulating various phenomena such as product popularity, stock market behaviors, and resource fluctuations. This guide will walk you through the steps of installing the package and running your first simulation. Installation To use SimNexus, you need to have Python installed on your machine. If you do not have Python installed, you can download and install it from python.org . Install from GitHub SimNexus can be installed directly from its GitHub repository using pip. Open your command line interface (CLI) and run the following command: pip install git+https://github.com/teaching-repositories/simnexus.git -q This command will fetch the latest version of SimNexus from the GitHub repository and install it along with its dependencies. Verify Installation To ensure that SimNexus was installed correctly, try running the following command: python -c \"import simnexus; print(simnexus.__version__)\" This command should print the version number of the SimNexus package if it has been installed successfully. Running Your First Simulation Once SimNexus is installed, you can start simulating right away. Here\u2019s a quick example on how to simulate product popularity: from simnexus import ProductPopularitySimulation # Create a simulation instance sim = ProductPopularitySimulation( start_demand=100, days=365, growth_rate=0.01, marketing_impact=0.05, promotion_day=100, promotion_effectiveness=0.3, random_seed=42 ) # Run the simulation results = sim.run_simulation() # Print the results print(results) This example sets up a year-long simulation of product demand, including a promotion day with specific effectiveness. Next Steps Explore the detailed API documentation for more features and other simulation types. Check out examples and tutorials in the documentation to get more familiar with what you can achieve with SimNexus. Getting Help If you encounter any issues or have questions, please refer to the Contact page for information on how to get in touch. Thank you for using SimNexus, and happy simulating!","title":"Getting Started"},{"location":"getting_started/#getting-started-with-simnexus","text":"Welcome to the getting started guide for SimNexus, a package designed for simulating various phenomena such as product popularity, stock market behaviors, and resource fluctuations. This guide will walk you through the steps of installing the package and running your first simulation.","title":"Getting Started with SimNexus"},{"location":"getting_started/#installation","text":"To use SimNexus, you need to have Python installed on your machine. If you do not have Python installed, you can download and install it from python.org .","title":"Installation"},{"location":"getting_started/#install-from-github","text":"SimNexus can be installed directly from its GitHub repository using pip. Open your command line interface (CLI) and run the following command: pip install git+https://github.com/teaching-repositories/simnexus.git -q This command will fetch the latest version of SimNexus from the GitHub repository and install it along with its dependencies.","title":"Install from GitHub"},{"location":"getting_started/#verify-installation","text":"To ensure that SimNexus was installed correctly, try running the following command: python -c \"import simnexus; print(simnexus.__version__)\" This command should print the version number of the SimNexus package if it has been installed successfully.","title":"Verify Installation"},{"location":"getting_started/#running-your-first-simulation","text":"Once SimNexus is installed, you can start simulating right away. Here\u2019s a quick example on how to simulate product popularity: from simnexus import ProductPopularitySimulation # Create a simulation instance sim = ProductPopularitySimulation( start_demand=100, days=365, growth_rate=0.01, marketing_impact=0.05, promotion_day=100, promotion_effectiveness=0.3, random_seed=42 ) # Run the simulation results = sim.run_simulation() # Print the results print(results) This example sets up a year-long simulation of product demand, including a promotion day with specific effectiveness.","title":"Running Your First Simulation"},{"location":"getting_started/#next-steps","text":"Explore the detailed API documentation for more features and other simulation types. Check out examples and tutorials in the documentation to get more familiar with what you can achieve with SimNexus.","title":"Next Steps"},{"location":"getting_started/#getting-help","text":"If you encounter any issues or have questions, please refer to the Contact page for information on how to get in touch. Thank you for using SimNexus, and happy simulating!","title":"Getting Help"},{"location":"modelling_market_dynamics/","text":"Modeling Market Dynamics This document provides a detailed overview and comparative analysis of the simulation models developed for understanding the dynamics of product popularity, stock market, and resource price fluctuations. Each model incorporates different aspects of market behavior and is loosley linked to traditional models in economics and finance. Product Popularity The formula used in the ProductPopularitySimulation class for simulating product demand appears to incorporate several key factors: natural growth, marketing impact, and promotional campaigns. Here's a breakdown of how the formula works for each day of the simulation: Natural Growth: The natural growth of the product's demand is modeled as a simple exponential growth, which is a common model in population dynamics and economics. Each day, the demand increases by a percentage defined by the growth_rate attribute. The formula for this part is: \\[ \\text{Natural Growth} = \\text{Previous Demand} \\times (1 + \\text{Growth Rate}) \\] Marketing Impact: On top of the natural growth, the formula also includes a daily impact from ongoing marketing efforts. This impact is additive and is calculated as a percentage of the previous day's demand, determined by the marketing_impact attribute: \\[ \\text{Marketing Influence} = \\text{Previous Demand} \\times \\text{Marketing Impact} \\] Promotional Campaign: If a promotional campaign occurs on a specific day (defined by promotion_day ), the demand for that day is further increased by a factor of promotion_effectiveness . This is modeled as a multiplicative boost to the demand calculated from natural growth and marketing influence: \\[ \\text{New Demand} = (\\text{Natural Growth} + \\text{Marketing Influence}) \\times (1 + \\text{Promotion Effectiveness}) \\] The overall formula for days without a promotional campaign is: \\[ \\text{New Demand} = \\text{Natural Growth} + \\text{Marketing Influence} \\] For the day with the promotional campaign, the formula changes as mentioned above. Relation to Classical Models The model presented in the ProductPopularitySimulation class is not based directly on any classical single formula but instead combines concepts from various fields like marketing theory, economics, and systems dynamics: - The exponential growth model for natural increase is classical in many biological and economic models. - The impact of marketing as an additive factor is a straightforward approach often used in preliminary marketing models. - The multiplicative effect of a special promotion is also commonly used in models assessing the impact of irregular or one-time events on ongoing processes. The combination of these elements into a single model for simulating product demand helps in understanding how different factors interact over time to influence the market dynamics of a product. It's a practical approach that allows for adjustments and analysis of individual components like marketing strategies and promotional campaigns. This type of model can be very useful in academic settings or business analytics to forecast product demand under varying scenarios. Resource Fluctuations The formula used in the ResourceFluctuationsSimulation class is designed to simulate the fluctuations in resource prices, incorporating daily volatility, a trend or drift over time, and the effects of supply disruptions. Here's a breakdown of how the formula works for each day of the simulation: Volatility and Drift: Each day, the price of the resource changes based on a combination of volatility and drift. The volatility represents the day-to-day variability in price changes, while the drift represents a consistent trend in price changes over time. This is modeled using a normal distribution where the mean of the distribution is given by the drift and the standard deviation by the volatility . This is expressed as: \\[ \\text{Random Change} = \\text{Normal}(\\text{Drift}, \\text{Volatility}) \\] Then, the new price is calculated as: \\[ \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Random Change}) \\] Supply Disruption: If there's a day specified for a supply disruption (given by supply_disruption_day ), the formula adjusts the price of the resource significantly based on the disruption_severity . The severity is modeled as a multiplicative factor to the price of the resource: \\[ \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Disruption Severity}) \\] Relation to Classical Models The simulation model appears to draw from the classical geometric Brownian motion (GBM) model, which is commonly used in financial mathematics to model stock prices and other financial assets. In GBM, the logarithm of the stock prices follows a Brownian motion (also known as a Wiener process) with drift and volatility, similar to the structure used in this resource simulation class: Geometric Brownian Motion: The use of previous_price * (1 + random_change) closely resembles the discrete approximation of GBM, where price changes are log-normally distributed, allowing the price to stay positive and fluctuate in a realistic manner. Supply Disruption as a Jump Process: The inclusion of supply disruption as a multiplicative effect on the price for a specific day can be seen as a form of a jump process, where the price can have sudden, significant changes due to external events. This is similar to models used in energy markets and commodities trading, where sudden events can cause significant price changes. Overall, while the exact parameters and implementation details might differ based on the simulation's objectives and the specific market being modeled, the underlying principles of the formula are well-established in the field of quantitative finance and economic modeling. Stock Market The formula used in the StockMarketSimulation class simulates stock price movements by incorporating volatility, a directional trend (drift), and the impact of specific market events. Here\u2019s a detailed explanation of the components of the formula: Volatility and Drift: Similar to the Resource Fluctuations Simulation, the stock price changes are driven by daily volatility and drift. Each day, the stock price undergoes a random change determined by a normal distribution centered around the drift (which can be positive or negative to represent an overall upward or downward trend) and spread according to the volatility (which accounts for the unpredictability or risk associated with the stock). This is mathematically modeled as: \\[ \\text{Random Change} = \\text{Normal}(\\text{Drift}, \\text{Volatility}) \\] The new price for each day is then calculated as: \\[ \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Random Change}) \\] Market Event Impact: If there is a significant market event planned for a specific day ( event_day ), the stock price is adjusted to reflect the impact of this event using the event_impact , which is applied as a multiplicative factor. This adjusts the price in response to the event: \\[ \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Event Impact}) \\] Relation to Classical Models The simulation model described in the StockMarketSimulation class aligns closely with the principles of the Geometric Brownian Motion (GBM) model used in financial mathematics to model the prices of financial instruments like stocks and commodities: Geometric Brownian Motion: The use of a random change modeled with a normal distribution where the stock price is updated by multiplying the previous price by \\((1 + \\text{Random Change})\\) is characteristic of GBM. In GBM, prices are assumed to follow a log-normal distribution, ensuring that they remain positive and reflect realistic financial scenarios where prices are multiplicative. Event Modeling: The handling of specific market events by applying a multiplicative impact on the stock price for a particular day resembles a jump-diffusion model . This type of model is often used to incorporate sudden, significant changes in price due to external factors (such as corporate news, geopolitical events, etc.), which aren\u2019t captured by the standard GBM. Overall, the simulation combines elements from established financial models to allow for dynamic and realistic modeling of stock prices, accommodating both the continuous aspect of daily price changes and discrete events that can significantly affect market conditions. This approach is quite common in financial market simulations used for educational purposes, trading strategy development, and risk management. Conclusion The simulation models developed for analyzing product popularity, resource fluctuations, and stock market dynamics provide valuable insights into the complex interactions within markets. By relating these models to classical and traditional theories, we can better understand the underlying mechanisms and potentially predict future behaviors under various scenarios.","title":"Modelling Market Dynamics"},{"location":"modelling_market_dynamics/#modeling-market-dynamics","text":"This document provides a detailed overview and comparative analysis of the simulation models developed for understanding the dynamics of product popularity, stock market, and resource price fluctuations. Each model incorporates different aspects of market behavior and is loosley linked to traditional models in economics and finance.","title":"Modeling Market Dynamics"},{"location":"modelling_market_dynamics/#product-popularity","text":"The formula used in the ProductPopularitySimulation class for simulating product demand appears to incorporate several key factors: natural growth, marketing impact, and promotional campaigns. Here's a breakdown of how the formula works for each day of the simulation: Natural Growth: The natural growth of the product's demand is modeled as a simple exponential growth, which is a common model in population dynamics and economics. Each day, the demand increases by a percentage defined by the growth_rate attribute. The formula for this part is: \\[ \\text{Natural Growth} = \\text{Previous Demand} \\times (1 + \\text{Growth Rate}) \\] Marketing Impact: On top of the natural growth, the formula also includes a daily impact from ongoing marketing efforts. This impact is additive and is calculated as a percentage of the previous day's demand, determined by the marketing_impact attribute: \\[ \\text{Marketing Influence} = \\text{Previous Demand} \\times \\text{Marketing Impact} \\] Promotional Campaign: If a promotional campaign occurs on a specific day (defined by promotion_day ), the demand for that day is further increased by a factor of promotion_effectiveness . This is modeled as a multiplicative boost to the demand calculated from natural growth and marketing influence: \\[ \\text{New Demand} = (\\text{Natural Growth} + \\text{Marketing Influence}) \\times (1 + \\text{Promotion Effectiveness}) \\] The overall formula for days without a promotional campaign is: \\[ \\text{New Demand} = \\text{Natural Growth} + \\text{Marketing Influence} \\] For the day with the promotional campaign, the formula changes as mentioned above.","title":"Product Popularity"},{"location":"modelling_market_dynamics/#relation-to-classical-models","text":"The model presented in the ProductPopularitySimulation class is not based directly on any classical single formula but instead combines concepts from various fields like marketing theory, economics, and systems dynamics: - The exponential growth model for natural increase is classical in many biological and economic models. - The impact of marketing as an additive factor is a straightforward approach often used in preliminary marketing models. - The multiplicative effect of a special promotion is also commonly used in models assessing the impact of irregular or one-time events on ongoing processes. The combination of these elements into a single model for simulating product demand helps in understanding how different factors interact over time to influence the market dynamics of a product. It's a practical approach that allows for adjustments and analysis of individual components like marketing strategies and promotional campaigns. This type of model can be very useful in academic settings or business analytics to forecast product demand under varying scenarios.","title":"Relation to Classical Models"},{"location":"modelling_market_dynamics/#resource-fluctuations","text":"The formula used in the ResourceFluctuationsSimulation class is designed to simulate the fluctuations in resource prices, incorporating daily volatility, a trend or drift over time, and the effects of supply disruptions. Here's a breakdown of how the formula works for each day of the simulation: Volatility and Drift: Each day, the price of the resource changes based on a combination of volatility and drift. The volatility represents the day-to-day variability in price changes, while the drift represents a consistent trend in price changes over time. This is modeled using a normal distribution where the mean of the distribution is given by the drift and the standard deviation by the volatility . This is expressed as: \\[ \\text{Random Change} = \\text{Normal}(\\text{Drift}, \\text{Volatility}) \\] Then, the new price is calculated as: \\[ \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Random Change}) \\] Supply Disruption: If there's a day specified for a supply disruption (given by supply_disruption_day ), the formula adjusts the price of the resource significantly based on the disruption_severity . The severity is modeled as a multiplicative factor to the price of the resource: \\[ \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Disruption Severity}) \\]","title":"Resource Fluctuations"},{"location":"modelling_market_dynamics/#relation-to-classical-models_1","text":"The simulation model appears to draw from the classical geometric Brownian motion (GBM) model, which is commonly used in financial mathematics to model stock prices and other financial assets. In GBM, the logarithm of the stock prices follows a Brownian motion (also known as a Wiener process) with drift and volatility, similar to the structure used in this resource simulation class: Geometric Brownian Motion: The use of previous_price * (1 + random_change) closely resembles the discrete approximation of GBM, where price changes are log-normally distributed, allowing the price to stay positive and fluctuate in a realistic manner. Supply Disruption as a Jump Process: The inclusion of supply disruption as a multiplicative effect on the price for a specific day can be seen as a form of a jump process, where the price can have sudden, significant changes due to external events. This is similar to models used in energy markets and commodities trading, where sudden events can cause significant price changes. Overall, while the exact parameters and implementation details might differ based on the simulation's objectives and the specific market being modeled, the underlying principles of the formula are well-established in the field of quantitative finance and economic modeling.","title":"Relation to Classical Models"},{"location":"modelling_market_dynamics/#stock-market","text":"The formula used in the StockMarketSimulation class simulates stock price movements by incorporating volatility, a directional trend (drift), and the impact of specific market events. Here\u2019s a detailed explanation of the components of the formula: Volatility and Drift: Similar to the Resource Fluctuations Simulation, the stock price changes are driven by daily volatility and drift. Each day, the stock price undergoes a random change determined by a normal distribution centered around the drift (which can be positive or negative to represent an overall upward or downward trend) and spread according to the volatility (which accounts for the unpredictability or risk associated with the stock). This is mathematically modeled as: \\[ \\text{Random Change} = \\text{Normal}(\\text{Drift}, \\text{Volatility}) \\] The new price for each day is then calculated as: \\[ \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Random Change}) \\] Market Event Impact: If there is a significant market event planned for a specific day ( event_day ), the stock price is adjusted to reflect the impact of this event using the event_impact , which is applied as a multiplicative factor. This adjusts the price in response to the event: \\[ \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Event Impact}) \\]","title":"Stock Market"},{"location":"modelling_market_dynamics/#relation-to-classical-models_2","text":"The simulation model described in the StockMarketSimulation class aligns closely with the principles of the Geometric Brownian Motion (GBM) model used in financial mathematics to model the prices of financial instruments like stocks and commodities: Geometric Brownian Motion: The use of a random change modeled with a normal distribution where the stock price is updated by multiplying the previous price by \\((1 + \\text{Random Change})\\) is characteristic of GBM. In GBM, prices are assumed to follow a log-normal distribution, ensuring that they remain positive and reflect realistic financial scenarios where prices are multiplicative. Event Modeling: The handling of specific market events by applying a multiplicative impact on the stock price for a particular day resembles a jump-diffusion model . This type of model is often used to incorporate sudden, significant changes in price due to external factors (such as corporate news, geopolitical events, etc.), which aren\u2019t captured by the standard GBM. Overall, the simulation combines elements from established financial models to allow for dynamic and realistic modeling of stock prices, accommodating both the continuous aspect of daily price changes and discrete events that can significantly affect market conditions. This approach is quite common in financial market simulations used for educational purposes, trading strategy development, and risk management.","title":"Relation to Classical Models"},{"location":"modelling_market_dynamics/#conclusion","text":"The simulation models developed for analyzing product popularity, resource fluctuations, and stock market dynamics provide valuable insights into the complex interactions within markets. By relating these models to classical and traditional theories, we can better understand the underlying mechanisms and potentially predict future behaviors under various scenarios.","title":"Conclusion"},{"location":"product_popularity/","text":"Product Popularity Simulation Purpose This simulation models the dynamics of product popularity, allowing students to explore factors affecting market demand and the effectiveness of marketing strategies. Parameters start_demand : The initial demand for the product. days : The duration of the simulation. growth_rate : The rate at which product demand grows or declines naturally over time. marketing_impact : The impact of marketing efforts on demand, represented as a percentage increase. promotion_day : Specifies the day on which a major marketing campaign starts (optional). promotion_effectiveness : The effectiveness of the promotional campaign, impacting demand growth positively. Example Code from simnexus import ProductPopularitySimulation import matplotlib.pyplot as plt # Setting up a scenario with moderate natural growth and a significant marketing campaign. sim = ProductPopularitySimulation(start_demand=500, days=180, growth_rate=0.02, marketing_impact=0.1, promotion_day=30, promotion_effectiveness=0.5) demand = sim.run_simulation() # Visualizing product popularity plt.figure(figsize=(10, 6)) plt.plot(demand, label='Product Demand') plt.axvline(x=sim.promotion_day, color='blue', linestyle='--', label='Marketing Campaign Start') plt.xlabel('Days') plt.ylabel('Demand Units') plt.title('Product Popularity Simulation') plt.legend() plt.show() Conducting Visual Analysis Using the Simulation Experiment! Use the simulation to explore and test various scenarios. Adjust parameters, try different strategies, and analyse the outcomes to gain deeper insights into resource management under fluctuating conditions. Baseline Scenario Without Marketing Efforts : Begin by running simulations without any marketing efforts to understand the natural demand growth. This baseline will help you compare the effectiveness of different marketing strategies. Labeling and Annotations : Make sure your plots are well-labeled with days on the x-axis and demand units on the y-axis. Use annotations or markers to highlight when significant marketing campaigns start and their duration if applicable. Interactive Exploration : If possible, use interactive tools to adjust the parameters like growth rate, marketing impact, and timing of campaigns dynamically. This can help visualize the immediate effects of these changes on the demand curve. Comparative Analysis : Run multiple scenarios side-by-side to directly compare different growth rates, marketing impacts, or strategies. This comparison can make it easier to visualize which scenarios are most effective. Consider calculating and comparing statistics such as the average price before and after a disruption event to quantify its impact. Use Case Ideas Examine How Changes in Growth Rate and Marketing Impact Affect Demand Start by considering how natural growth influences demand over time. Introduce varying levels of marketing impact and observe how each setting alters the demand curve. Questions to Consider: How does increasing the growth rate affect the overall demand by the end of the simulation? What happens when you combine high growth rates with strong marketing impacts? Simulate a Major Marketing Campaign and Analyze Its Effect on Demand Growth Set up a scenario where a marketing campaign kicks in at a specific day. Vary the effectiveness of these campaigns to see different outcomes. Questions to Consider: How does the timing of a marketing campaign influence its effectiveness? Compare the demand before and after the promotion day. What insights can you gain about the campaign\u2019s impact? Explore Different Marketing Strategies and Their Cost-Effectiveness Implement various hypothetical marketing strategies with assumed costs and effectiveness. Calculate the return on investment (ROI) for each strategy based on the increase in demand they generate versus their costs. Questions to Consider: Which marketing strategy offers the best ROI? How does the cost of a strategy relate to its effectiveness in boosting demand? Model Description The Product Popularity Simulation class models the demand for a product over time, considering factors such as natural growth, marketing impact, and promotional campaigns. The simulation formula includes: Natural Growth: \\( \\text{Natural Growth} = \\text{Previous Demand} \\times (1 + \\text{Growth Rate}) \\) Marketing Influence: \\( \\text{Marketing Influence} = \\text{Previous Demand} \\times \\text{Marketing Impact} \\) Promotional Impact: On promotional days, the demand is further adjusted by a factor of \\( \\text{Promotion Effectiveness} \\) . See Modelling Market Dynamics for more information.","title":"Product Popularity"},{"location":"product_popularity/#product-popularity-simulation","text":"","title":"Product Popularity Simulation"},{"location":"product_popularity/#purpose","text":"This simulation models the dynamics of product popularity, allowing students to explore factors affecting market demand and the effectiveness of marketing strategies.","title":"Purpose"},{"location":"product_popularity/#parameters","text":"start_demand : The initial demand for the product. days : The duration of the simulation. growth_rate : The rate at which product demand grows or declines naturally over time. marketing_impact : The impact of marketing efforts on demand, represented as a percentage increase. promotion_day : Specifies the day on which a major marketing campaign starts (optional). promotion_effectiveness : The effectiveness of the promotional campaign, impacting demand growth positively.","title":"Parameters"},{"location":"product_popularity/#example-code","text":"from simnexus import ProductPopularitySimulation import matplotlib.pyplot as plt # Setting up a scenario with moderate natural growth and a significant marketing campaign. sim = ProductPopularitySimulation(start_demand=500, days=180, growth_rate=0.02, marketing_impact=0.1, promotion_day=30, promotion_effectiveness=0.5) demand = sim.run_simulation() # Visualizing product popularity plt.figure(figsize=(10, 6)) plt.plot(demand, label='Product Demand') plt.axvline(x=sim.promotion_day, color='blue', linestyle='--', label='Marketing Campaign Start') plt.xlabel('Days') plt.ylabel('Demand Units') plt.title('Product Popularity Simulation') plt.legend() plt.show()","title":"Example Code"},{"location":"product_popularity/#conducting-visual-analysis-using-the-simulation","text":"Experiment! Use the simulation to explore and test various scenarios. Adjust parameters, try different strategies, and analyse the outcomes to gain deeper insights into resource management under fluctuating conditions. Baseline Scenario Without Marketing Efforts : Begin by running simulations without any marketing efforts to understand the natural demand growth. This baseline will help you compare the effectiveness of different marketing strategies. Labeling and Annotations : Make sure your plots are well-labeled with days on the x-axis and demand units on the y-axis. Use annotations or markers to highlight when significant marketing campaigns start and their duration if applicable. Interactive Exploration : If possible, use interactive tools to adjust the parameters like growth rate, marketing impact, and timing of campaigns dynamically. This can help visualize the immediate effects of these changes on the demand curve. Comparative Analysis : Run multiple scenarios side-by-side to directly compare different growth rates, marketing impacts, or strategies. This comparison can make it easier to visualize which scenarios are most effective. Consider calculating and comparing statistics such as the average price before and after a disruption event to quantify its impact.","title":"Conducting Visual Analysis Using the Simulation"},{"location":"product_popularity/#use-case-ideas","text":"","title":"Use Case Ideas"},{"location":"product_popularity/#examine-how-changes-in-growth-rate-and-marketing-impact-affect-demand","text":"Start by considering how natural growth influences demand over time. Introduce varying levels of marketing impact and observe how each setting alters the demand curve. Questions to Consider: How does increasing the growth rate affect the overall demand by the end of the simulation? What happens when you combine high growth rates with strong marketing impacts?","title":"Examine How Changes in Growth Rate and Marketing Impact Affect Demand"},{"location":"product_popularity/#simulate-a-major-marketing-campaign-and-analyze-its-effect-on-demand-growth","text":"Set up a scenario where a marketing campaign kicks in at a specific day. Vary the effectiveness of these campaigns to see different outcomes. Questions to Consider: How does the timing of a marketing campaign influence its effectiveness? Compare the demand before and after the promotion day. What insights can you gain about the campaign\u2019s impact?","title":"Simulate a Major Marketing Campaign and Analyze Its Effect on Demand Growth"},{"location":"product_popularity/#explore-different-marketing-strategies-and-their-cost-effectiveness","text":"Implement various hypothetical marketing strategies with assumed costs and effectiveness. Calculate the return on investment (ROI) for each strategy based on the increase in demand they generate versus their costs. Questions to Consider: Which marketing strategy offers the best ROI? How does the cost of a strategy relate to its effectiveness in boosting demand?","title":"Explore Different Marketing Strategies and Their Cost-Effectiveness"},{"location":"product_popularity/#model-description","text":"The Product Popularity Simulation class models the demand for a product over time, considering factors such as natural growth, marketing impact, and promotional campaigns. The simulation formula includes: Natural Growth: \\( \\text{Natural Growth} = \\text{Previous Demand} \\times (1 + \\text{Growth Rate}) \\) Marketing Influence: \\( \\text{Marketing Influence} = \\text{Previous Demand} \\times \\text{Marketing Impact} \\) Promotional Impact: On promotional days, the demand is further adjusted by a factor of \\( \\text{Promotion Effectiveness} \\) . See Modelling Market Dynamics for more information.","title":"Model Description"},{"location":"resource_fluctuations/","text":"Resource Fluctuation Simulation Purpose This simulation models the price fluctuations of a critical resource for a business. It is applicable to commodities, raw materials, or any essential business input, helping students understand market dynamics and pricing strategies. Parameters start_price : The initial price of the resource. days : The duration of the simulation. volatility : Controls the severity of day-to-day price fluctuations. drift : Indicates the general upward or downward trend in price over time. supply_disruption_day : Specifies the day on which a supply disruption event occurs (optional). disruption_severity : The magnitude of the supply disruption's impact on the price, positive indicating a shortage and negative indicating a surplus. Example Code from simnexus import ResourceFluctuationsSimulation import matplotlib.pyplot as plt # Setting up a moderate volatility and upward drift scenario with a supply disruption. sim = ResourceFluctuationsSimulation(start_price=100, days=250, volatility=0.015, drift=0.0003, supply_disruption_day=100, disruption_severity=0.3) prices = sim.run_simulation() # Visualising the price simulation plt.figure(figsise=(10, 6)) plt.plot(prices, label='Resource Price') plt.axvline(x=sim.supply_disruption_day, color='r', linestyle='--', label='Supply Disruption') plt.xlabel('Days') plt.ylabel('Price') plt.title('Resource Price Simulation') plt.legend() plt.show() Conducting Visual Analysis Using the Simulation: Experiment! Use the simulation to explore and test various scenarios. Adjust parameters, try different strategies, and analyse the outcomes to gain deeper insights into resource management under fluctuating conditions. Baseline Scenario Without Disruptions : Begin by simulating the price path without any disruptions to establish a baseline for comparison with more complex scenarios. Labeling and Annotations : Ensure that your plots clearly show the days on the x-axis and price on the y-axis. Use lines or markers to indicate the day of a supply disruption or the implementation of a hedging strategy. Interactive Exploration : If tools are available, adjust parameters such as volatility and drift dynamically to observe how these changes affect the price simulation. This can help in understanding the immediate effects of each parameter. Comparative Analysis : Conduct side-by-side comparisons of scenarios with different levels of volatility or different strategies to visually assess their impact. This can make it easier to understand which conditions or strategies lead to the most favorable outcomes. Consider calculating and comparing statistics such as the average price before and after a disruption event to quantify its impact. Use Case Ideas Assess the Impact of Volatility on Price Stability: Start by exploring how different levels of volatility affect day-to-day price fluctuations. This will help you understand the sensitivity of resource prices to changes in market conditions. Questions to Consider: What trends do you notice as volatility increases? How does it affect the predictability of price movements? How do different volatility levels impact the overall risk profile of investing in this resource? Model a Supply Disruption Event and Analyse Its Impact Set up scenarios where a supply disruption occurs at a predetermined day. Change the severity of these disruptions to see how they influence resource prices. Questions to Consider: How does the timing of a supply disruption affect its impact on resource prices? Compare the prices before and after the disruption. What can you infer about the resilience of the market to sudden changes? Explore Hedging Strategies Implement simple hedging strategies to see how they could mitigate the risks associated with price volatility and supply disruptions. Consider strategies like futures contracts or options.Questions to Consider: Which hedging strategy appears most effective in stabilising price fluctuations? How do the costs of these strategies compare to their benefits in terms of reduced price volatility? Model Description The Resource Fluctuations Simulation class is designed to understand the dynamics of resource price changes, incorporating volatility, market trends (drift), and supply disruptions. Key components of the simulation formula include: Daily Price Change: Modeled using a normal distribution influenced by drift and volatility. Supply Disruption: A specific day's price can be significantly altered due to external shocks, modeled as \\( \\text{Disruption Severity} \\) . See Modelling Market Dynamics for more information.","title":"Resource Fluctuations"},{"location":"resource_fluctuations/#resource-fluctuation-simulation","text":"","title":"Resource Fluctuation Simulation"},{"location":"resource_fluctuations/#purpose","text":"This simulation models the price fluctuations of a critical resource for a business. It is applicable to commodities, raw materials, or any essential business input, helping students understand market dynamics and pricing strategies.","title":"Purpose"},{"location":"resource_fluctuations/#parameters","text":"start_price : The initial price of the resource. days : The duration of the simulation. volatility : Controls the severity of day-to-day price fluctuations. drift : Indicates the general upward or downward trend in price over time. supply_disruption_day : Specifies the day on which a supply disruption event occurs (optional). disruption_severity : The magnitude of the supply disruption's impact on the price, positive indicating a shortage and negative indicating a surplus. Example Code from simnexus import ResourceFluctuationsSimulation import matplotlib.pyplot as plt # Setting up a moderate volatility and upward drift scenario with a supply disruption. sim = ResourceFluctuationsSimulation(start_price=100, days=250, volatility=0.015, drift=0.0003, supply_disruption_day=100, disruption_severity=0.3) prices = sim.run_simulation() # Visualising the price simulation plt.figure(figsise=(10, 6)) plt.plot(prices, label='Resource Price') plt.axvline(x=sim.supply_disruption_day, color='r', linestyle='--', label='Supply Disruption') plt.xlabel('Days') plt.ylabel('Price') plt.title('Resource Price Simulation') plt.legend() plt.show()","title":"Parameters"},{"location":"resource_fluctuations/#conducting-visual-analysis-using-the-simulation","text":"Experiment! Use the simulation to explore and test various scenarios. Adjust parameters, try different strategies, and analyse the outcomes to gain deeper insights into resource management under fluctuating conditions. Baseline Scenario Without Disruptions : Begin by simulating the price path without any disruptions to establish a baseline for comparison with more complex scenarios. Labeling and Annotations : Ensure that your plots clearly show the days on the x-axis and price on the y-axis. Use lines or markers to indicate the day of a supply disruption or the implementation of a hedging strategy. Interactive Exploration : If tools are available, adjust parameters such as volatility and drift dynamically to observe how these changes affect the price simulation. This can help in understanding the immediate effects of each parameter. Comparative Analysis : Conduct side-by-side comparisons of scenarios with different levels of volatility or different strategies to visually assess their impact. This can make it easier to understand which conditions or strategies lead to the most favorable outcomes. Consider calculating and comparing statistics such as the average price before and after a disruption event to quantify its impact.","title":"Conducting Visual Analysis Using the Simulation:"},{"location":"resource_fluctuations/#use-case-ideas","text":"","title":"Use Case Ideas"},{"location":"resource_fluctuations/#assess-the-impact-of-volatility-on-price-stability","text":"Start by exploring how different levels of volatility affect day-to-day price fluctuations. This will help you understand the sensitivity of resource prices to changes in market conditions. Questions to Consider: What trends do you notice as volatility increases? How does it affect the predictability of price movements? How do different volatility levels impact the overall risk profile of investing in this resource?","title":"Assess the Impact of Volatility on Price Stability:"},{"location":"resource_fluctuations/#model-a-supply-disruption-event-and-analyse-its-impact","text":"Set up scenarios where a supply disruption occurs at a predetermined day. Change the severity of these disruptions to see how they influence resource prices. Questions to Consider: How does the timing of a supply disruption affect its impact on resource prices? Compare the prices before and after the disruption. What can you infer about the resilience of the market to sudden changes?","title":"Model a Supply Disruption Event and Analyse Its Impact"},{"location":"resource_fluctuations/#explore-hedging-strategies","text":"Implement simple hedging strategies to see how they could mitigate the risks associated with price volatility and supply disruptions. Consider strategies like futures contracts or options.Questions to Consider: Which hedging strategy appears most effective in stabilising price fluctuations? How do the costs of these strategies compare to their benefits in terms of reduced price volatility?","title":"Explore Hedging Strategies"},{"location":"resource_fluctuations/#model-description","text":"The Resource Fluctuations Simulation class is designed to understand the dynamics of resource price changes, incorporating volatility, market trends (drift), and supply disruptions. Key components of the simulation formula include: Daily Price Change: Modeled using a normal distribution influenced by drift and volatility. Supply Disruption: A specific day's price can be significantly altered due to external shocks, modeled as \\( \\text{Disruption Severity} \\) . See Modelling Market Dynamics for more information.","title":"Model Description"},{"location":"stock_market/","text":"Stock Market Simulation Purpose This simulation models the fluctuations of stock prices, enabling students to explore financial market dynamics and develop basic trading strategies. It serves as a practical tool for understanding the principles of market speculation and risk management. Parameters start_price : The initial price of the stock. days : The duration of the simulation. volatility : The measure of price fluctuations, indicating how much the price can vary day-to-day. drift : Represents the overall trend in stock prices, whether upward or downward. event_day : Specifies the day on which a major market event occurs (optional). event_impact : The magnitude of the event\u2019s impact on stock prices, positive for beneficial events and negative for detrimental ones. Example Code from simnexus import StockMarketSimulation import matplotlib.pyplot as plt # Example scenario: High volatility with a downward price trend and a significant market event. sim = StockMarketSimulation(start_price=100, days=365, volatility=0.03, drift=-0.001, event_day=100, event_impact=-0.2) prices = sim.run_simulation() # Visualising the stock market fluctuations plt.figure(figsise=(10, 6)) plt.plot(prices, label='Stock Price') plt.axvline(x=sim.event_day, color='red', linestyle='--', label='Major Market Event') plt.xlabel('Days') plt.ylabel('Price ($)') plt.title('Stock Market Simulation') plt.legend() plt.show() Conducting Visual Analysis Using the Simulation: Experiment! Use the simulation to explore and test various scenarios. Adjust parameters, try different strategies, and analyse the outcomes to gain deeper insights into resource management under fluctuating conditions. Baseline Scenario Without Disruptions : Begin by simulating the price path without any disruptions to establish a baseline for comparison with more complex scenarios. Labeling and Annotations : Ensure that your plots clearly show the days on the x-axis and price on the y-axis. Use lines or markers to indicate the day of the event or the implementation of a trading strategy. Interactive Exploration : If tools are available, adjust parameters such as volatility and drift dynamically to observe how these changes affect the price simulation. This can help in understanding the immediate effects of each parameter. Comparative Analysis : Conduct side-by-side comparisons of scenarios with different levels of volatility or different strategies to visually assess their impact. This can make it easier to understand which conditions or strategies lead to the most favorable outcomes. Consider calculating and comparing statistics such as the average price before and after a disruption event to quantify its impact. Use Case Ideas Investigate How Volatility Affects Stock Price Stability Begin by analysing how different levels of volatility impact the stability of stock prices and the potential for investment gains or losses. Questions to Consider: How do changes in volatility affect the frequency and magnitude of price swings? What implications does increased volatility have on the risk and potential returns of stock investments? Simulate a Major Market Event and Analyse Its Impact Set up scenarios where a significant market event affects stock prices on a specific day. Adjust the impact of these events to observe varying outcomes. Questions to Consider: How does the market respond to positive versus negative events? Analyse the recovery or further decline in stock prices following the event. What does this tell you about market sentiment and investor behavior? Develop and Test Trading Strategies Explore basic trading strategies such as \"buy and hold\", \"moving average crossover\", or \"momentum-based\" strategies. Implement these strategies in your simulation to test their effectiveness over time. Questions to Consider: Which strategy performs best under stable versus volatile market conditions? How do these strategies perform in response to the simulated market events? Model Description The Stock Market Simulation class focuses on the fluctuations in stock prices influenced by daily volatility, market trends, and specific market events. The simulation adjusts stock prices daily based on: Random daily changes due to volatility and drift. Event impacts that multiplicatively affect the stock prices on designated days. See Modelling Market Dynamics for more information.","title":"Stock Market"},{"location":"stock_market/#stock-market-simulation","text":"","title":"Stock Market Simulation"},{"location":"stock_market/#purpose","text":"This simulation models the fluctuations of stock prices, enabling students to explore financial market dynamics and develop basic trading strategies. It serves as a practical tool for understanding the principles of market speculation and risk management.","title":"Purpose"},{"location":"stock_market/#parameters","text":"start_price : The initial price of the stock. days : The duration of the simulation. volatility : The measure of price fluctuations, indicating how much the price can vary day-to-day. drift : Represents the overall trend in stock prices, whether upward or downward. event_day : Specifies the day on which a major market event occurs (optional). event_impact : The magnitude of the event\u2019s impact on stock prices, positive for beneficial events and negative for detrimental ones. Example Code from simnexus import StockMarketSimulation import matplotlib.pyplot as plt # Example scenario: High volatility with a downward price trend and a significant market event. sim = StockMarketSimulation(start_price=100, days=365, volatility=0.03, drift=-0.001, event_day=100, event_impact=-0.2) prices = sim.run_simulation() # Visualising the stock market fluctuations plt.figure(figsise=(10, 6)) plt.plot(prices, label='Stock Price') plt.axvline(x=sim.event_day, color='red', linestyle='--', label='Major Market Event') plt.xlabel('Days') plt.ylabel('Price ($)') plt.title('Stock Market Simulation') plt.legend() plt.show()","title":"Parameters"},{"location":"stock_market/#conducting-visual-analysis-using-the-simulation","text":"Experiment! Use the simulation to explore and test various scenarios. Adjust parameters, try different strategies, and analyse the outcomes to gain deeper insights into resource management under fluctuating conditions. Baseline Scenario Without Disruptions : Begin by simulating the price path without any disruptions to establish a baseline for comparison with more complex scenarios. Labeling and Annotations : Ensure that your plots clearly show the days on the x-axis and price on the y-axis. Use lines or markers to indicate the day of the event or the implementation of a trading strategy. Interactive Exploration : If tools are available, adjust parameters such as volatility and drift dynamically to observe how these changes affect the price simulation. This can help in understanding the immediate effects of each parameter. Comparative Analysis : Conduct side-by-side comparisons of scenarios with different levels of volatility or different strategies to visually assess their impact. This can make it easier to understand which conditions or strategies lead to the most favorable outcomes. Consider calculating and comparing statistics such as the average price before and after a disruption event to quantify its impact.","title":"Conducting Visual Analysis Using the Simulation:"},{"location":"stock_market/#use-case-ideas","text":"","title":"Use Case Ideas"},{"location":"stock_market/#investigate-how-volatility-affects-stock-price-stability","text":"Begin by analysing how different levels of volatility impact the stability of stock prices and the potential for investment gains or losses. Questions to Consider: How do changes in volatility affect the frequency and magnitude of price swings? What implications does increased volatility have on the risk and potential returns of stock investments?","title":"Investigate How Volatility Affects Stock Price Stability"},{"location":"stock_market/#simulate-a-major-market-event-and-analyse-its-impact","text":"Set up scenarios where a significant market event affects stock prices on a specific day. Adjust the impact of these events to observe varying outcomes. Questions to Consider: How does the market respond to positive versus negative events? Analyse the recovery or further decline in stock prices following the event. What does this tell you about market sentiment and investor behavior?","title":"Simulate a Major Market Event and Analyse Its Impact"},{"location":"stock_market/#develop-and-test-trading-strategies","text":"Explore basic trading strategies such as \"buy and hold\", \"moving average crossover\", or \"momentum-based\" strategies. Implement these strategies in your simulation to test their effectiveness over time. Questions to Consider: Which strategy performs best under stable versus volatile market conditions? How do these strategies perform in response to the simulated market events?","title":"Develop and Test Trading Strategies"},{"location":"stock_market/#model-description","text":"The Stock Market Simulation class focuses on the fluctuations in stock prices influenced by daily volatility, market trends, and specific market events. The simulation adjusts stock prices daily based on: Random daily changes due to volatility and drift. Event impacts that multiplicatively affect the stock prices on designated days. See Modelling Market Dynamics for more information.","title":"Model Description"}]}